# Identifiant unique d'une entit√© (souvent l'adresse d'un user, txHash, etc.)
# id: ID!  
# ! signifie champ obligatoire.
# Sans !, le champ est optionnel (peut √™tre null).
# Exemple : "0xabc123..." ou "user-001"

# Cha√Æne de caract√®res
# referralCode: String
# Exemple : "INVITE2025"

# Entier 32 bits
# referral: Int!
# Exemple : 42

# Entier arbitrairement grand (utilis√© pour montants en wei, index, etc.)
# totalLiquidity: BigInt!
# Exemple : 1000000000000000000 (1 ETH en wei)

# Adresse ou hash (bytes bruts)
# aTokenAddress: Bytes!
# Exemple : 0x1234567890abcdef...

# Bool√©en (vrai/faux)
# isActive: Boolean!
# Exemple : true ou false

# Une liste d'entit√©s non nulles
# borrows: [BorrowEvent!]!

# Peut aussi √™tre optionnelle :
# optionalList: [Reserve]
# [Type!]! = une liste non nulle contenant uniquement des √©l√©ments non nuls

# [Type] = une liste optionnelle, pouvant contenir des √©l√©ments nuls

type User @entity {
  id: ID!
  
  # Aggregate metrics
  totalSuppliedUSD: BigInt!
  totalBorrowedUSD: BigInt!
  totalCollateralUSD: BigInt!
  healthFactor: BigInt!

  referralCode: String
  referralCount: Int
  points: Int
  referralPoints: Int
  eModeActivated: Boolean
  
  # Relationships
  reserves: [UserReserve!]! @derivedFrom(field: "user")
  supplies: [SupplyEvent!]! @derivedFrom(field: "user")
  withdraws: [WithdrawEvent!]! @derivedFrom(field: "user")
  borrows: [BorrowEvent!]! @derivedFrom(field: "user")
  repays: [RepayEvent!]! @derivedFrom(field: "user")
  liquidations: [LiquidationEvent!]! @derivedFrom(field: "user")
}

# Reserve <==> Asset 
type Reserve @entity {
  id: ID!
  symbol: String!
  name: String!
  decimals: Int!
  priceUSD: BigInt!                      # üí∞ Prix actuel en USD
  marketSizeUSD: BigInt!                 # üìä Market size
  availableLiquidity: BigInt!
  totalLiquidity: BigInt!
  totalSupplied: BigInt!
  totalBorrowed: BigInt!
  utilizationRate: BigInt!               # ‚öôÔ∏è Utilisation (en base 1e18)
  market: Market!    # üîó lien ajout√©
  
  # Rates
  supplyAPY: BigInt!                     # En Ray (1e27)
  borrowAPY: BigInt!
  liquidityRate: BigInt!
  variableBorrowRate: BigInt!
  liquidityIndex: BigInt!
  variableBorrowIndex: BigInt!
  
  # Collateral params
  ltv: BigInt!                           # Loan-to-value (ex: 6000 = 60%)
  liquidationThreshold: BigInt!
  liquidationBonus: BigInt!
  reserveFactor: BigInt!
  liquidationPenalty: BigInt!            # ex: 500 = 5%
  
  # Status
  isActive: Boolean!
  isFrozen: Boolean!
  borrowingEnabled: Boolean!
  usageAsCollateralEnabled: Boolean!

  # Tokens
  aTokenAddress: Bytes!
  variableDebtTokenAddress: Bytes!

  # Relationships
  supplies: [SupplyEvent!]! @derivedFrom(field: "reserve")
  withdraws: [WithdrawEvent!]! @derivedFrom(field: "reserve")
  borrows: [BorrowEvent!]! @derivedFrom(field: "reserve")
  repays: [RepayEvent!]! @derivedFrom(field: "reserve")
  liquidations: [LiquidationEvent!]! @derivedFrom(field: "collateralReserve")
  userReserves: [UserReserve!]! @derivedFrom(field: "reserve")
}

# Position actuelle d‚Äôun utilisateur sur une r√©serve donn√©e
type UserReserve @entity {
  id: ID!                            # ex: `${user.id}-${reserve.id}`
  user: User!                        # üîó Lien vers l‚Äôutilisateur
  reserve: Reserve!                  # üîó Lien vers la r√©serve

  # --- Balances en cours ---
  depositedAmount: BigInt!           # Montant total d√©pos√© (en tokens)
  borrowedAmount: BigInt!            # Montant total emprunt√© (en tokens)
  depositedUSD: BigInt!              # Valeur USD du d√©p√¥t
  borrowedUSD: BigInt!               # Valeur USD de l‚Äôemprunt

  # --- Collateral status ---
  usageAsCollateralEnabled: Boolean! # Si l‚Äôutilisateur utilise ce d√©p√¥t comme collat√©ral
  eModeCategory: Int                 # Cat√©gorie E-Mode si applicable

  # --- Health & risques ---
  healthFactor: BigInt!              # Sant√© de cette position (1e18 = seuil)
  liquidationThreshold: BigInt!      # Seuil appliqu√© pour cet utilisateur sur cette r√©serve
  ltv: BigInt!                       # Loan-to-value sp√©cifique

  # --- R√©f√©rences historiques ---
  snapshots: [UserReserveSnapshot!]! @derivedFrom(field: "userReserve")
}

type SupplyEvent @entity {
  id: ID!
  user: User!
  reserve: Reserve!
  onBehalfOf: Bytes!
  amount: BigInt!
  referral: Int         # nullable car pas toujours pr√©sent
  timestamp: BigInt!
  txHash: Bytes!
}

type BorrowEvent @entity {
  id: ID!
  user: User!
  reserve: Reserve!
  onBehalfOf: Bytes!
  amount: BigInt!
  borrowRateMode: BigInt!   # ‚¨ÖÔ∏è correction si event Solidity ‚Üí uint256
  borrowRate: BigInt!
  referral: Int             # nullable
  timestamp: BigInt!
  txHash: Bytes!
}

type WithdrawEvent @entity {
  id: ID!
  user: User!
  reserve: Reserve!
  to: Bytes!
  amount: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
}


type RepayEvent @entity {
  id: ID!
  user: User!
  reserve: Reserve!
  repayer: Bytes!
  amount: BigInt!
  useATokens: Boolean!
  timestamp: BigInt!
  txHash: Bytes!
}

type LiquidationEvent @entity {
  id: ID!
  user: User!
  collateralReserve: Reserve!
  debtReserve: Reserve!
  debtToCover: BigInt!
  liquidatedCollateralAmount: BigInt!
  liquidator: Bytes!
  receiveAToken: Boolean!
  timestamp: BigInt!
  txHash: Bytes!
}

type Protocol @entity {
  id: ID!
  totalValueLockedUSD: BigInt!
  totalBorrowedUSD: BigInt!
  totalUsers: Int!
  totalSupplies: Int!
  totalBorrows: Int!
  totalRepays: Int!
  totalWithdraws: Int!
  totalLiquidations: Int!
}

type Market @entity {
  id: ID!                           # ex: "pooled" ou "isolated"
  name: String!                     # "Pooled" ou "Isolated"
  description: String               # texte descriptif du market

  # Metrics globales
  marketSizeUSD: BigInt!            # Taille totale du march√© (en USD)
  feesPaidUSD: BigInt!              # Total des frais pay√©s
  sLPLocked: BigInt                 # Montant total de sLP verrouill√©
  sSWIMPriceUSD: BigInt             # Prix du token SWIM
  maxAPRLockedSLP: BigInt           # APR max sur sLP bloqu√©

  # Relations
  reserves: [Reserve!]! @derivedFrom(field: "market")
  assets: [Asset!]! @derivedFrom(field: "market") # nouvelle relation
}

type Asset @entity {
  id: ID!                          # Exemple : "ETH", "USDT", "HYPE"
  symbol: String!                  # Symbole (ETH, USDT, etc.)
  name: String!                    # Nom complet (Ethereum, USD Tether, etc.)
  icon: String                     # URL ou hash de l‚Äôic√¥ne
  category: String                 # "Bluechips", "Hype", "Stablecoins", etc.

  # --- Price data ---
  priceUSD: BigInt!                # Prix actuel en USD
  reserveSizeUSD: BigInt!          # Valeur totale du pool (USD)
  availableLiquidity: BigInt!      # Montant disponible √† emprunter (en unit√©s)
  utilizationRate: BigInt!         # Taux d‚Äôutilisation (x100 pour %)

  # --- Interest rates ---
  supplyAPY: BigInt!               # Taux d‚Äôint√©r√™t pour les d√©posants
  borrowAPY: BigInt!               # Taux d‚Äôint√©r√™t pour les emprunteurs
  swimAPR: BigInt                  # Taux APR li√© au token SWIM
  loopAPR: BigInt                  # APR en boucle si applicable

  # --- Collateral parameters ---
  maxLTV: BigInt!                  # Loan-to-Value max (x100 pour %)
  liquidationThreshold: BigInt!    # Seuil de liquidation
  liquidationPenalty: BigInt!      # P√©nalit√© de liquidation
  reserveFactor: BigInt!           # Part des int√©r√™ts r√©serv√©e au protocole

  # --- Totals ---
  totalSupplied: BigInt!           # Total des tokens d√©pos√©s
  totalBorrowed: BigInt!           # Total des tokens emprunt√©s

  # --- Relations ---
  market: Market!                  # Market auquel appartient l‚Äôasset
  reserve: Reserve!                # R√©f√©rence directe √† la r√©serve (lien 1:1)
  rateHistory: [AssetRateSnapshot!]! @derivedFrom(field: "asset")
}

type AssetRateSnapshot @entity {
  id: ID!
  asset: Asset!
  timestamp: BigInt!
  priceUSD: BigInt!
  supplyAPY: BigInt!
  borrowAPY: BigInt!
  utilizationRate: BigInt!
}

# üß± Exemple concret : ETH Asset
# {
#   "id": "ETH",
#   "symbol": "ETH",
#   "name": "Ethereum",
#   "category": "Bluechips",
#   "priceUSD": "4345000000000000000000",     // $4,345
#   "reserveSizeUSD": "234540234000000000000000",
#   "availableLiquidity": "42510000000000000000",
#   "utilizationRate": "9255",                // 92.55%
#   "supplyAPY": "716",
#   "borrowAPY": "533",
#   "maxLTV": "8000",
#   "liquidationThreshold": "8500",
#   "liquidationPenalty": "1500",
#   "reserveFactor": "500",
#   "totalSupplied": "4345980",
#   "totalBorrowed": "4345980",
#   "market": "pooled"
# }

# Chaque bloc (ou chaque p√©riode) tu enregistres un snapshot de chaque r√©serve.
# Cela permet d‚Äôafficher les graphiques ‚ÄúSupply Info‚Äù et ‚ÄúBorrow Info‚Äù
type ReserveSnapshot @entity {
  id: ID!                            # Format recommand√© : `${reserve.id}-${timestamp}`
  reserve: Reserve!                  # üîó Lien vers la r√©serve concern√©e
  timestamp: BigInt!                 # ‚è∞ Moment du snapshot (en secondes)
  blockNumber: BigInt                # Num√©ro de bloc (optionnel mais pratique)

  # --- Valeurs de march√© ---
  priceUSD: BigInt!
  totalLiquidity: BigInt!
  availableLiquidity: BigInt!
  totalSupplied: BigInt!
  totalBorrowed: BigInt!
  utilizationRate: BigInt!

  # --- Taux ---
  supplyAPY: BigInt!
  borrowAPY: BigInt!
  liquidityRate: BigInt!
  variableBorrowRate: BigInt!

  # --- Param√®tres collat√©raux ---
  ltv: BigInt!
  liquidationThreshold: BigInt!
  reserveFactor: BigInt!

  # --- R√©f√©rences ---
  createdAt: BigInt!                 # M√™me que timestamp
}

# Cette entit√© suit l‚Äô√©volution des positions pour un utilisateur sur une r√©serve donn√©e 
# (utile pour tes graphiques ‚ÄúUser portfolio over time‚Äù).
type UserReserveSnapshot @entity {
  id: ID!                            # ex: `${userReserve.id}-${timestamp}`
  userReserve: UserReserve!          # üîó Lien vers la position actuelle
  user: User!
  reserve: Reserve!
  timestamp: BigInt!
  blockNumber: BigInt!

  # --- Balances ---
  depositedAmount: BigInt!           # Montant d√©pos√© √† ce moment
  borrowedAmount: BigInt!            # Montant emprunt√©
  depositedUSD: BigInt!              # Valeur USD du d√©p√¥t
  borrowedUSD: BigInt!               # Valeur USD de l‚Äôemprunt

  # --- Statut et taux ---
  supplyAPY: BigInt!
  borrowAPY: BigInt!
  healthFactor: BigInt!              # Sant√© de la position √† ce moment-l√†

  # --- Collateral status ---
  usageAsCollateralEnabledOnUser: Boolean!

  # --- R√©f√©rences ---
  createdAt: BigInt!                 # M√™me que timestamp
}
