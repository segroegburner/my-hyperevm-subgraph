// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get interestRateMode(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get borrowRate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get referralCode(): i32 {
    return this._event.parameters[6].value.toI32();
  }
}

export class DeficitCovered extends ethereum.Event {
  get params(): DeficitCovered__Params {
    return new DeficitCovered__Params(this);
  }
}

export class DeficitCovered__Params {
  _event: DeficitCovered;

  constructor(event: DeficitCovered) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountCovered(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DeficitCreated extends ethereum.Event {
  get params(): DeficitCreated__Params {
    return new DeficitCreated__Params(this);
  }
}

export class DeficitCreated__Params {
  _event: DeficitCreated;

  constructor(event: DeficitCreated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get debtAsset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountCreated(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FlashLoan extends ethereum.Event {
  get params(): FlashLoan__Params {
    return new FlashLoan__Params(this);
  }
}

export class FlashLoan__Params {
  _event: FlashLoan;

  constructor(event: FlashLoan) {
    this._event = event;
  }

  get target(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get initiator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get interestRateMode(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get premium(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get referralCode(): i32 {
    return this._event.parameters[6].value.toI32();
  }
}

export class IsolationModeTotalDebtUpdated extends ethereum.Event {
  get params(): IsolationModeTotalDebtUpdated__Params {
    return new IsolationModeTotalDebtUpdated__Params(this);
  }
}

export class IsolationModeTotalDebtUpdated__Params {
  _event: IsolationModeTotalDebtUpdated;

  constructor(event: IsolationModeTotalDebtUpdated) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalDebt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LiquidationCall extends ethereum.Event {
  get params(): LiquidationCall__Params {
    return new LiquidationCall__Params(this);
  }
}

export class LiquidationCall__Params {
  _event: LiquidationCall;

  constructor(event: LiquidationCall) {
    this._event = event;
  }

  get collateralAsset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get debtAsset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get debtToCover(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidatedCollateralAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get liquidator(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get receiveAToken(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class MintedToTreasury extends ethereum.Event {
  get params(): MintedToTreasury__Params {
    return new MintedToTreasury__Params(this);
  }
}

export class MintedToTreasury__Params {
  _event: MintedToTreasury;

  constructor(event: MintedToTreasury) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountMinted(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PositionManagerApproved extends ethereum.Event {
  get params(): PositionManagerApproved__Params {
    return new PositionManagerApproved__Params(this);
  }
}

export class PositionManagerApproved__Params {
  _event: PositionManagerApproved;

  constructor(event: PositionManagerApproved) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PositionManagerRevoked extends ethereum.Event {
  get params(): PositionManagerRevoked__Params {
    return new PositionManagerRevoked__Params(this);
  }
}

export class PositionManagerRevoked__Params {
  _event: PositionManagerRevoked;

  constructor(event: PositionManagerRevoked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Repay extends ethereum.Event {
  get params(): Repay__Params {
    return new Repay__Params(this);
  }
}

export class Repay__Params {
  _event: Repay;

  constructor(event: Repay) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get repayer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get useATokens(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class ReserveDataUpdated extends ethereum.Event {
  get params(): ReserveDataUpdated__Params {
    return new ReserveDataUpdated__Params(this);
  }
}

export class ReserveDataUpdated__Params {
  _event: ReserveDataUpdated;

  constructor(event: ReserveDataUpdated) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidityRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get stableBorrowRate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get variableBorrowRate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidityIndex(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get variableBorrowIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ReserveUsedAsCollateralDisabled extends ethereum.Event {
  get params(): ReserveUsedAsCollateralDisabled__Params {
    return new ReserveUsedAsCollateralDisabled__Params(this);
  }
}

export class ReserveUsedAsCollateralDisabled__Params {
  _event: ReserveUsedAsCollateralDisabled;

  constructor(event: ReserveUsedAsCollateralDisabled) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ReserveUsedAsCollateralEnabled extends ethereum.Event {
  get params(): ReserveUsedAsCollateralEnabled__Params {
    return new ReserveUsedAsCollateralEnabled__Params(this);
  }
}

export class ReserveUsedAsCollateralEnabled__Params {
  _event: ReserveUsedAsCollateralEnabled;

  constructor(event: ReserveUsedAsCollateralEnabled) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Supply extends ethereum.Event {
  get params(): Supply__Params {
    return new Supply__Params(this);
  }
}

export class Supply__Params {
  _event: Supply;

  constructor(event: Supply) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get referralCode(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class UserEModeSet extends ethereum.Event {
  get params(): UserEModeSet__Params {
    return new UserEModeSet__Params(this);
  }
}

export class UserEModeSet__Params {
  _event: UserEModeSet;

  constructor(event: UserEModeSet) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get categoryId(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PoolInstance__getConfigurationResultValue0Struct extends ethereum.Tuple {
  get data(): BigInt {
    return this[0].toBigInt();
  }
}

export class PoolInstance__getEModeCategoryCollateralConfigResultResStruct extends ethereum.Tuple {
  get ltv(): i32 {
    return this[0].toI32();
  }

  get liquidationThreshold(): i32 {
    return this[1].toI32();
  }

  get liquidationBonus(): i32 {
    return this[2].toI32();
  }
}

export class PoolInstance__getEModeCategoryDataResultValue0Struct extends ethereum.Tuple {
  get ltv(): i32 {
    return this[0].toI32();
  }

  get liquidationThreshold(): i32 {
    return this[1].toI32();
  }

  get liquidationBonus(): i32 {
    return this[2].toI32();
  }

  get priceSource(): Address {
    return this[3].toAddress();
  }

  get label(): string {
    return this[4].toString();
  }
}

export class PoolInstance__getReserveDataResultResStruct extends ethereum.Tuple {
  get configuration(): PoolInstance__getReserveDataResultResConfigurationStruct {
    return changetype<PoolInstance__getReserveDataResultResConfigurationStruct>(
      this[0].toTuple()
    );
  }

  get liquidityIndex(): BigInt {
    return this[1].toBigInt();
  }

  get currentLiquidityRate(): BigInt {
    return this[2].toBigInt();
  }

  get variableBorrowIndex(): BigInt {
    return this[3].toBigInt();
  }

  get currentVariableBorrowRate(): BigInt {
    return this[4].toBigInt();
  }

  get currentStableBorrowRate(): BigInt {
    return this[5].toBigInt();
  }

  get lastUpdateTimestamp(): BigInt {
    return this[6].toBigInt();
  }

  get id(): i32 {
    return this[7].toI32();
  }

  get aTokenAddress(): Address {
    return this[8].toAddress();
  }

  get stableDebtTokenAddress(): Address {
    return this[9].toAddress();
  }

  get variableDebtTokenAddress(): Address {
    return this[10].toAddress();
  }

  get interestRateStrategyAddress(): Address {
    return this[11].toAddress();
  }

  get accruedToTreasury(): BigInt {
    return this[12].toBigInt();
  }

  get unbacked(): BigInt {
    return this[13].toBigInt();
  }

  get isolationModeTotalDebt(): BigInt {
    return this[14].toBigInt();
  }
}

export class PoolInstance__getReserveDataResultResConfigurationStruct extends ethereum.Tuple {
  get data(): BigInt {
    return this[0].toBigInt();
  }
}

export class PoolInstance__getUserAccountDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getTotalCollateralBase(): BigInt {
    return this.value0;
  }

  getTotalDebtBase(): BigInt {
    return this.value1;
  }

  getAvailableBorrowsBase(): BigInt {
    return this.value2;
  }

  getCurrentLiquidationThreshold(): BigInt {
    return this.value3;
  }

  getLtv(): BigInt {
    return this.value4;
  }

  getHealthFactor(): BigInt {
    return this.value5;
  }
}

export class PoolInstance__getUserConfigurationResultValue0Struct extends ethereum.Tuple {
  get data(): BigInt {
    return this[0].toBigInt();
  }
}

export class PoolInstance extends ethereum.SmartContract {
  static bind(address: Address): PoolInstance {
    return new PoolInstance("PoolInstance", address);
  }

  ADDRESSES_PROVIDER(): Address {
    let result = super.call(
      "ADDRESSES_PROVIDER",
      "ADDRESSES_PROVIDER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ADDRESSES_PROVIDER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ADDRESSES_PROVIDER",
      "ADDRESSES_PROVIDER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FLASHLOAN_PREMIUM_TOTAL(): BigInt {
    let result = super.call(
      "FLASHLOAN_PREMIUM_TOTAL",
      "FLASHLOAN_PREMIUM_TOTAL():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_FLASHLOAN_PREMIUM_TOTAL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FLASHLOAN_PREMIUM_TOTAL",
      "FLASHLOAN_PREMIUM_TOTAL():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  FLASHLOAN_PREMIUM_TO_PROTOCOL(): BigInt {
    let result = super.call(
      "FLASHLOAN_PREMIUM_TO_PROTOCOL",
      "FLASHLOAN_PREMIUM_TO_PROTOCOL():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_FLASHLOAN_PREMIUM_TO_PROTOCOL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FLASHLOAN_PREMIUM_TO_PROTOCOL",
      "FLASHLOAN_PREMIUM_TO_PROTOCOL():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_NUMBER_RESERVES(): i32 {
    let result = super.call(
      "MAX_NUMBER_RESERVES",
      "MAX_NUMBER_RESERVES():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_MAX_NUMBER_RESERVES(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "MAX_NUMBER_RESERVES",
      "MAX_NUMBER_RESERVES():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  POOL_REVISION(): BigInt {
    let result = super.call("POOL_REVISION", "POOL_REVISION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_POOL_REVISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "POOL_REVISION",
      "POOL_REVISION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  RESERVE_INTEREST_RATE_STRATEGY(): Address {
    let result = super.call(
      "RESERVE_INTEREST_RATE_STRATEGY",
      "RESERVE_INTEREST_RATE_STRATEGY():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_RESERVE_INTEREST_RATE_STRATEGY(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "RESERVE_INTEREST_RATE_STRATEGY",
      "RESERVE_INTEREST_RATE_STRATEGY():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  UMBRELLA(): Bytes {
    let result = super.call("UMBRELLA", "UMBRELLA():(bytes32)", []);

    return result[0].toBytes();
  }

  try_UMBRELLA(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("UMBRELLA", "UMBRELLA():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  eliminateReserveDeficit(asset: Address, amount: BigInt): BigInt {
    let result = super.call(
      "eliminateReserveDeficit",
      "eliminateReserveDeficit(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_eliminateReserveDeficit(
    asset: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "eliminateReserveDeficit",
      "eliminateReserveDeficit(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowLogic(): Address {
    let result = super.call("getBorrowLogic", "getBorrowLogic():(address)", []);

    return result[0].toAddress();
  }

  try_getBorrowLogic(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBorrowLogic",
      "getBorrowLogic():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getConfiguration(
    asset: Address
  ): PoolInstance__getConfigurationResultValue0Struct {
    let result = super.call(
      "getConfiguration",
      "getConfiguration(address):((uint256))",
      [ethereum.Value.fromAddress(asset)]
    );

    return changetype<PoolInstance__getConfigurationResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getConfiguration(
    asset: Address
  ): ethereum.CallResult<PoolInstance__getConfigurationResultValue0Struct> {
    let result = super.tryCall(
      "getConfiguration",
      "getConfiguration(address):((uint256))",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolInstance__getConfigurationResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getEModeCategoryBorrowableBitmap(id: i32): BigInt {
    let result = super.call(
      "getEModeCategoryBorrowableBitmap",
      "getEModeCategoryBorrowableBitmap(uint8):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))]
    );

    return result[0].toBigInt();
  }

  try_getEModeCategoryBorrowableBitmap(id: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEModeCategoryBorrowableBitmap",
      "getEModeCategoryBorrowableBitmap(uint8):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEModeCategoryCollateralBitmap(id: i32): BigInt {
    let result = super.call(
      "getEModeCategoryCollateralBitmap",
      "getEModeCategoryCollateralBitmap(uint8):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))]
    );

    return result[0].toBigInt();
  }

  try_getEModeCategoryCollateralBitmap(id: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEModeCategoryCollateralBitmap",
      "getEModeCategoryCollateralBitmap(uint8):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEModeCategoryCollateralConfig(
    id: i32
  ): PoolInstance__getEModeCategoryCollateralConfigResultResStruct {
    let result = super.call(
      "getEModeCategoryCollateralConfig",
      "getEModeCategoryCollateralConfig(uint8):((uint16,uint16,uint16))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))]
    );

    return changetype<
      PoolInstance__getEModeCategoryCollateralConfigResultResStruct
    >(result[0].toTuple());
  }

  try_getEModeCategoryCollateralConfig(
    id: i32
  ): ethereum.CallResult<
    PoolInstance__getEModeCategoryCollateralConfigResultResStruct
  > {
    let result = super.tryCall(
      "getEModeCategoryCollateralConfig",
      "getEModeCategoryCollateralConfig(uint8):((uint16,uint16,uint16))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolInstance__getEModeCategoryCollateralConfigResultResStruct>(
        value[0].toTuple()
      )
    );
  }

  getEModeCategoryData(
    id: i32
  ): PoolInstance__getEModeCategoryDataResultValue0Struct {
    let result = super.call(
      "getEModeCategoryData",
      "getEModeCategoryData(uint8):((uint16,uint16,uint16,address,string))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))]
    );

    return changetype<PoolInstance__getEModeCategoryDataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getEModeCategoryData(
    id: i32
  ): ethereum.CallResult<PoolInstance__getEModeCategoryDataResultValue0Struct> {
    let result = super.tryCall(
      "getEModeCategoryData",
      "getEModeCategoryData(uint8):((uint16,uint16,uint16,address,string))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolInstance__getEModeCategoryDataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getEModeCategoryLabel(id: i32): string {
    let result = super.call(
      "getEModeCategoryLabel",
      "getEModeCategoryLabel(uint8):(string)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))]
    );

    return result[0].toString();
  }

  try_getEModeCategoryLabel(id: i32): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getEModeCategoryLabel",
      "getEModeCategoryLabel(uint8):(string)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getEModeLogic(): Address {
    let result = super.call("getEModeLogic", "getEModeLogic():(address)", []);

    return result[0].toAddress();
  }

  try_getEModeLogic(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEModeLogic",
      "getEModeLogic():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFlashLoanLogic(): Address {
    let result = super.call(
      "getFlashLoanLogic",
      "getFlashLoanLogic():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getFlashLoanLogic(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getFlashLoanLogic",
      "getFlashLoanLogic():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLiquidationGracePeriod(asset: Address): BigInt {
    let result = super.call(
      "getLiquidationGracePeriod",
      "getLiquidationGracePeriod(address):(uint40)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toBigInt();
  }

  try_getLiquidationGracePeriod(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLiquidationGracePeriod",
      "getLiquidationGracePeriod(address):(uint40)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLiquidationLogic(): Address {
    let result = super.call(
      "getLiquidationLogic",
      "getLiquidationLogic():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getLiquidationLogic(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLiquidationLogic",
      "getLiquidationLogic():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPoolLogic(): Address {
    let result = super.call("getPoolLogic", "getPoolLogic():(address)", []);

    return result[0].toAddress();
  }

  try_getPoolLogic(): ethereum.CallResult<Address> {
    let result = super.tryCall("getPoolLogic", "getPoolLogic():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReserveAToken(asset: Address): Address {
    let result = super.call(
      "getReserveAToken",
      "getReserveAToken(address):(address)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toAddress();
  }

  try_getReserveAToken(asset: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getReserveAToken",
      "getReserveAToken(address):(address)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReserveAddressById(id: i32): Address {
    let result = super.call(
      "getReserveAddressById",
      "getReserveAddressById(uint16):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))]
    );

    return result[0].toAddress();
  }

  try_getReserveAddressById(id: i32): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getReserveAddressById",
      "getReserveAddressById(uint16):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReserveData(asset: Address): PoolInstance__getReserveDataResultResStruct {
    let result = super.call(
      "getReserveData",
      "getReserveData(address):(((uint256),uint128,uint128,uint128,uint128,uint128,uint40,uint16,address,address,address,address,uint128,uint128,uint128))",
      [ethereum.Value.fromAddress(asset)]
    );

    return changetype<PoolInstance__getReserveDataResultResStruct>(
      result[0].toTuple()
    );
  }

  try_getReserveData(
    asset: Address
  ): ethereum.CallResult<PoolInstance__getReserveDataResultResStruct> {
    let result = super.tryCall(
      "getReserveData",
      "getReserveData(address):(((uint256),uint128,uint128,uint128,uint128,uint128,uint40,uint16,address,address,address,address,uint128,uint128,uint128))",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolInstance__getReserveDataResultResStruct>(
        value[0].toTuple()
      )
    );
  }

  getReserveDeficit(asset: Address): BigInt {
    let result = super.call(
      "getReserveDeficit",
      "getReserveDeficit(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toBigInt();
  }

  try_getReserveDeficit(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveDeficit",
      "getReserveDeficit(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveNormalizedIncome(asset: Address): BigInt {
    let result = super.call(
      "getReserveNormalizedIncome",
      "getReserveNormalizedIncome(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toBigInt();
  }

  try_getReserveNormalizedIncome(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveNormalizedIncome",
      "getReserveNormalizedIncome(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveNormalizedVariableDebt(asset: Address): BigInt {
    let result = super.call(
      "getReserveNormalizedVariableDebt",
      "getReserveNormalizedVariableDebt(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toBigInt();
  }

  try_getReserveNormalizedVariableDebt(
    asset: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveNormalizedVariableDebt",
      "getReserveNormalizedVariableDebt(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveVariableDebtToken(asset: Address): Address {
    let result = super.call(
      "getReserveVariableDebtToken",
      "getReserveVariableDebtToken(address):(address)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toAddress();
  }

  try_getReserveVariableDebtToken(
    asset: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getReserveVariableDebtToken",
      "getReserveVariableDebtToken(address):(address)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReservesCount(): BigInt {
    let result = super.call(
      "getReservesCount",
      "getReservesCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getReservesCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReservesCount",
      "getReservesCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReservesList(): Array<Address> {
    let result = super.call(
      "getReservesList",
      "getReservesList():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getReservesList(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getReservesList",
      "getReservesList():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getSupplyLogic(): Address {
    let result = super.call("getSupplyLogic", "getSupplyLogic():(address)", []);

    return result[0].toAddress();
  }

  try_getSupplyLogic(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSupplyLogic",
      "getSupplyLogic():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUserAccountData(user: Address): PoolInstance__getUserAccountDataResult {
    let result = super.call(
      "getUserAccountData",
      "getUserAccountData(address):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return new PoolInstance__getUserAccountDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getUserAccountData(
    user: Address
  ): ethereum.CallResult<PoolInstance__getUserAccountDataResult> {
    let result = super.tryCall(
      "getUserAccountData",
      "getUserAccountData(address):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolInstance__getUserAccountDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getUserConfiguration(
    user: Address
  ): PoolInstance__getUserConfigurationResultValue0Struct {
    let result = super.call(
      "getUserConfiguration",
      "getUserConfiguration(address):((uint256))",
      [ethereum.Value.fromAddress(user)]
    );

    return changetype<PoolInstance__getUserConfigurationResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getUserConfiguration(
    user: Address
  ): ethereum.CallResult<PoolInstance__getUserConfigurationResultValue0Struct> {
    let result = super.tryCall(
      "getUserConfiguration",
      "getUserConfiguration(address):((uint256))",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolInstance__getUserConfigurationResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getUserEMode(user: Address): BigInt {
    let result = super.call("getUserEMode", "getUserEMode(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getUserEMode(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserEMode",
      "getUserEMode(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVirtualUnderlyingBalance(asset: Address): BigInt {
    let result = super.call(
      "getVirtualUnderlyingBalance",
      "getVirtualUnderlyingBalance(address):(uint128)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toBigInt();
  }

  try_getVirtualUnderlyingBalance(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVirtualUnderlyingBalance",
      "getVirtualUnderlyingBalance(address):(uint128)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedPositionManager(user: Address, positionManager: Address): boolean {
    let result = super.call(
      "isApprovedPositionManager",
      "isApprovedPositionManager(address,address):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(positionManager)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedPositionManager(
    user: Address,
    positionManager: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedPositionManager",
      "isApprovedPositionManager(address,address):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(positionManager)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  repay(
    asset: Address,
    amount: BigInt,
    interestRateMode: BigInt,
    onBehalfOf: Address
  ): BigInt {
    let result = super.call(
      "repay",
      "repay(address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(interestRateMode),
        ethereum.Value.fromAddress(onBehalfOf)
      ]
    );

    return result[0].toBigInt();
  }

  try_repay(
    asset: Address,
    amount: BigInt,
    interestRateMode: BigInt,
    onBehalfOf: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repay",
      "repay(address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(interestRateMode),
        ethereum.Value.fromAddress(onBehalfOf)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repayWithATokens(
    asset: Address,
    amount: BigInt,
    interestRateMode: BigInt
  ): BigInt {
    let result = super.call(
      "repayWithATokens",
      "repayWithATokens(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(interestRateMode)
      ]
    );

    return result[0].toBigInt();
  }

  try_repayWithATokens(
    asset: Address,
    amount: BigInt,
    interestRateMode: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repayWithATokens",
      "repayWithATokens(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(interestRateMode)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repayWithPermit(
    asset: Address,
    amount: BigInt,
    interestRateMode: BigInt,
    onBehalfOf: Address,
    deadline: BigInt,
    permitV: i32,
    permitR: Bytes,
    permitS: Bytes
  ): BigInt {
    let result = super.call(
      "repayWithPermit",
      "repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(interestRateMode),
        ethereum.Value.fromAddress(onBehalfOf),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(permitV)),
        ethereum.Value.fromFixedBytes(permitR),
        ethereum.Value.fromFixedBytes(permitS)
      ]
    );

    return result[0].toBigInt();
  }

  try_repayWithPermit(
    asset: Address,
    amount: BigInt,
    interestRateMode: BigInt,
    onBehalfOf: Address,
    deadline: BigInt,
    permitV: i32,
    permitR: Bytes,
    permitS: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repayWithPermit",
      "repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(interestRateMode),
        ethereum.Value.fromAddress(onBehalfOf),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(permitV)),
        ethereum.Value.fromFixedBytes(permitR),
        ethereum.Value.fromFixedBytes(permitS)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(asset: Address, amount: BigInt, to: Address): BigInt {
    let result = super.call(
      "withdraw",
      "withdraw(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(to)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdraw(
    asset: Address,
    amount: BigInt,
    to: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get provider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get interestRateStrategy_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApprovePositionManagerCall extends ethereum.Call {
  get inputs(): ApprovePositionManagerCall__Inputs {
    return new ApprovePositionManagerCall__Inputs(this);
  }

  get outputs(): ApprovePositionManagerCall__Outputs {
    return new ApprovePositionManagerCall__Outputs(this);
  }
}

export class ApprovePositionManagerCall__Inputs {
  _call: ApprovePositionManagerCall;

  constructor(call: ApprovePositionManagerCall) {
    this._call = call;
  }

  get positionManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approve(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ApprovePositionManagerCall__Outputs {
  _call: ApprovePositionManagerCall;

  constructor(call: ApprovePositionManagerCall) {
    this._call = call;
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get interestRateMode(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get referralCode(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class ConfigureEModeCategoryCall extends ethereum.Call {
  get inputs(): ConfigureEModeCategoryCall__Inputs {
    return new ConfigureEModeCategoryCall__Inputs(this);
  }

  get outputs(): ConfigureEModeCategoryCall__Outputs {
    return new ConfigureEModeCategoryCall__Outputs(this);
  }
}

export class ConfigureEModeCategoryCall__Inputs {
  _call: ConfigureEModeCategoryCall;

  constructor(call: ConfigureEModeCategoryCall) {
    this._call = call;
  }

  get id(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get category(): ConfigureEModeCategoryCallCategoryStruct {
    return changetype<ConfigureEModeCategoryCallCategoryStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class ConfigureEModeCategoryCall__Outputs {
  _call: ConfigureEModeCategoryCall;

  constructor(call: ConfigureEModeCategoryCall) {
    this._call = call;
  }
}

export class ConfigureEModeCategoryCallCategoryStruct extends ethereum.Tuple {
  get ltv(): i32 {
    return this[0].toI32();
  }

  get liquidationThreshold(): i32 {
    return this[1].toI32();
  }

  get liquidationBonus(): i32 {
    return this[2].toI32();
  }

  get label(): string {
    return this[3].toString();
  }
}

export class ConfigureEModeCategoryBorrowableBitmapCall extends ethereum.Call {
  get inputs(): ConfigureEModeCategoryBorrowableBitmapCall__Inputs {
    return new ConfigureEModeCategoryBorrowableBitmapCall__Inputs(this);
  }

  get outputs(): ConfigureEModeCategoryBorrowableBitmapCall__Outputs {
    return new ConfigureEModeCategoryBorrowableBitmapCall__Outputs(this);
  }
}

export class ConfigureEModeCategoryBorrowableBitmapCall__Inputs {
  _call: ConfigureEModeCategoryBorrowableBitmapCall;

  constructor(call: ConfigureEModeCategoryBorrowableBitmapCall) {
    this._call = call;
  }

  get id(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get borrowableBitmap(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConfigureEModeCategoryBorrowableBitmapCall__Outputs {
  _call: ConfigureEModeCategoryBorrowableBitmapCall;

  constructor(call: ConfigureEModeCategoryBorrowableBitmapCall) {
    this._call = call;
  }
}

export class ConfigureEModeCategoryCollateralBitmapCall extends ethereum.Call {
  get inputs(): ConfigureEModeCategoryCollateralBitmapCall__Inputs {
    return new ConfigureEModeCategoryCollateralBitmapCall__Inputs(this);
  }

  get outputs(): ConfigureEModeCategoryCollateralBitmapCall__Outputs {
    return new ConfigureEModeCategoryCollateralBitmapCall__Outputs(this);
  }
}

export class ConfigureEModeCategoryCollateralBitmapCall__Inputs {
  _call: ConfigureEModeCategoryCollateralBitmapCall;

  constructor(call: ConfigureEModeCategoryCollateralBitmapCall) {
    this._call = call;
  }

  get id(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get collateralBitmap(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConfigureEModeCategoryCollateralBitmapCall__Outputs {
  _call: ConfigureEModeCategoryCollateralBitmapCall;

  constructor(call: ConfigureEModeCategoryCollateralBitmapCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get referralCode(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DropReserveCall extends ethereum.Call {
  get inputs(): DropReserveCall__Inputs {
    return new DropReserveCall__Inputs(this);
  }

  get outputs(): DropReserveCall__Outputs {
    return new DropReserveCall__Outputs(this);
  }
}

export class DropReserveCall__Inputs {
  _call: DropReserveCall;

  constructor(call: DropReserveCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DropReserveCall__Outputs {
  _call: DropReserveCall;

  constructor(call: DropReserveCall) {
    this._call = call;
  }
}

export class EliminateReserveDeficitCall extends ethereum.Call {
  get inputs(): EliminateReserveDeficitCall__Inputs {
    return new EliminateReserveDeficitCall__Inputs(this);
  }

  get outputs(): EliminateReserveDeficitCall__Outputs {
    return new EliminateReserveDeficitCall__Outputs(this);
  }
}

export class EliminateReserveDeficitCall__Inputs {
  _call: EliminateReserveDeficitCall;

  constructor(call: EliminateReserveDeficitCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EliminateReserveDeficitCall__Outputs {
  _call: EliminateReserveDeficitCall;

  constructor(call: EliminateReserveDeficitCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class FinalizeTransferCall extends ethereum.Call {
  get inputs(): FinalizeTransferCall__Inputs {
    return new FinalizeTransferCall__Inputs(this);
  }

  get outputs(): FinalizeTransferCall__Outputs {
    return new FinalizeTransferCall__Outputs(this);
  }
}

export class FinalizeTransferCall__Inputs {
  _call: FinalizeTransferCall;

  constructor(call: FinalizeTransferCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get scaledAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get scaledBalanceFromBefore(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get scaledBalanceToBefore(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class FinalizeTransferCall__Outputs {
  _call: FinalizeTransferCall;

  constructor(call: FinalizeTransferCall) {
    this._call = call;
  }
}

export class FlashLoanCall extends ethereum.Call {
  get inputs(): FlashLoanCall__Inputs {
    return new FlashLoanCall__Inputs(this);
  }

  get outputs(): FlashLoanCall__Outputs {
    return new FlashLoanCall__Outputs(this);
  }
}

export class FlashLoanCall__Inputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get receiverAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get assets(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get interestRateModes(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get params(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get referralCode(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class FlashLoanCall__Outputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }
}

export class FlashLoanSimpleCall extends ethereum.Call {
  get inputs(): FlashLoanSimpleCall__Inputs {
    return new FlashLoanSimpleCall__Inputs(this);
  }

  get outputs(): FlashLoanSimpleCall__Outputs {
    return new FlashLoanSimpleCall__Outputs(this);
  }
}

export class FlashLoanSimpleCall__Inputs {
  _call: FlashLoanSimpleCall;

  constructor(call: FlashLoanSimpleCall) {
    this._call = call;
  }

  get receiverAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get asset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get params(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get referralCode(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class FlashLoanSimpleCall__Outputs {
  _call: FlashLoanSimpleCall;

  constructor(call: FlashLoanSimpleCall) {
    this._call = call;
  }
}

export class InitReserveCall extends ethereum.Call {
  get inputs(): InitReserveCall__Inputs {
    return new InitReserveCall__Inputs(this);
  }

  get outputs(): InitReserveCall__Outputs {
    return new InitReserveCall__Outputs(this);
  }
}

export class InitReserveCall__Inputs {
  _call: InitReserveCall;

  constructor(call: InitReserveCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get aTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get variableDebtAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitReserveCall__Outputs {
  _call: InitReserveCall;

  constructor(call: InitReserveCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get provider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidationCallCall extends ethereum.Call {
  get inputs(): LiquidationCallCall__Inputs {
    return new LiquidationCallCall__Inputs(this);
  }

  get outputs(): LiquidationCallCall__Outputs {
    return new LiquidationCallCall__Outputs(this);
  }
}

export class LiquidationCallCall__Inputs {
  _call: LiquidationCallCall;

  constructor(call: LiquidationCallCall) {
    this._call = call;
  }

  get collateralAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get debtAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get debtToCover(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get receiveAToken(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class LiquidationCallCall__Outputs {
  _call: LiquidationCallCall;

  constructor(call: LiquidationCallCall) {
    this._call = call;
  }
}

export class MintToTreasuryCall extends ethereum.Call {
  get inputs(): MintToTreasuryCall__Inputs {
    return new MintToTreasuryCall__Inputs(this);
  }

  get outputs(): MintToTreasuryCall__Outputs {
    return new MintToTreasuryCall__Outputs(this);
  }
}

export class MintToTreasuryCall__Inputs {
  _call: MintToTreasuryCall;

  constructor(call: MintToTreasuryCall) {
    this._call = call;
  }

  get assets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class MintToTreasuryCall__Outputs {
  _call: MintToTreasuryCall;

  constructor(call: MintToTreasuryCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RenouncePositionManagerRoleCall extends ethereum.Call {
  get inputs(): RenouncePositionManagerRoleCall__Inputs {
    return new RenouncePositionManagerRoleCall__Inputs(this);
  }

  get outputs(): RenouncePositionManagerRoleCall__Outputs {
    return new RenouncePositionManagerRoleCall__Outputs(this);
  }
}

export class RenouncePositionManagerRoleCall__Inputs {
  _call: RenouncePositionManagerRoleCall;

  constructor(call: RenouncePositionManagerRoleCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RenouncePositionManagerRoleCall__Outputs {
  _call: RenouncePositionManagerRoleCall;

  constructor(call: RenouncePositionManagerRoleCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get interestRateMode(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RepayWithATokensCall extends ethereum.Call {
  get inputs(): RepayWithATokensCall__Inputs {
    return new RepayWithATokensCall__Inputs(this);
  }

  get outputs(): RepayWithATokensCall__Outputs {
    return new RepayWithATokensCall__Outputs(this);
  }
}

export class RepayWithATokensCall__Inputs {
  _call: RepayWithATokensCall;

  constructor(call: RepayWithATokensCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get interestRateMode(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RepayWithATokensCall__Outputs {
  _call: RepayWithATokensCall;

  constructor(call: RepayWithATokensCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RepayWithPermitCall extends ethereum.Call {
  get inputs(): RepayWithPermitCall__Inputs {
    return new RepayWithPermitCall__Inputs(this);
  }

  get outputs(): RepayWithPermitCall__Outputs {
    return new RepayWithPermitCall__Outputs(this);
  }
}

export class RepayWithPermitCall__Inputs {
  _call: RepayWithPermitCall;

  constructor(call: RepayWithPermitCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get interestRateMode(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get permitV(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get permitR(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get permitS(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class RepayWithPermitCall__Outputs {
  _call: RepayWithPermitCall;

  constructor(call: RepayWithPermitCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RescueTokensCall extends ethereum.Call {
  get inputs(): RescueTokensCall__Inputs {
    return new RescueTokensCall__Inputs(this);
  }

  get outputs(): RescueTokensCall__Outputs {
    return new RescueTokensCall__Outputs(this);
  }
}

export class RescueTokensCall__Inputs {
  _call: RescueTokensCall;

  constructor(call: RescueTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RescueTokensCall__Outputs {
  _call: RescueTokensCall;

  constructor(call: RescueTokensCall) {
    this._call = call;
  }
}

export class ResetIsolationModeTotalDebtCall extends ethereum.Call {
  get inputs(): ResetIsolationModeTotalDebtCall__Inputs {
    return new ResetIsolationModeTotalDebtCall__Inputs(this);
  }

  get outputs(): ResetIsolationModeTotalDebtCall__Outputs {
    return new ResetIsolationModeTotalDebtCall__Outputs(this);
  }
}

export class ResetIsolationModeTotalDebtCall__Inputs {
  _call: ResetIsolationModeTotalDebtCall;

  constructor(call: ResetIsolationModeTotalDebtCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ResetIsolationModeTotalDebtCall__Outputs {
  _call: ResetIsolationModeTotalDebtCall;

  constructor(call: ResetIsolationModeTotalDebtCall) {
    this._call = call;
  }
}

export class SetConfigurationCall extends ethereum.Call {
  get inputs(): SetConfigurationCall__Inputs {
    return new SetConfigurationCall__Inputs(this);
  }

  get outputs(): SetConfigurationCall__Outputs {
    return new SetConfigurationCall__Outputs(this);
  }
}

export class SetConfigurationCall__Inputs {
  _call: SetConfigurationCall;

  constructor(call: SetConfigurationCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get configuration(): SetConfigurationCallConfigurationStruct {
    return changetype<SetConfigurationCallConfigurationStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class SetConfigurationCall__Outputs {
  _call: SetConfigurationCall;

  constructor(call: SetConfigurationCall) {
    this._call = call;
  }
}

export class SetConfigurationCallConfigurationStruct extends ethereum.Tuple {
  get data(): BigInt {
    return this[0].toBigInt();
  }
}

export class SetLiquidationGracePeriodCall extends ethereum.Call {
  get inputs(): SetLiquidationGracePeriodCall__Inputs {
    return new SetLiquidationGracePeriodCall__Inputs(this);
  }

  get outputs(): SetLiquidationGracePeriodCall__Outputs {
    return new SetLiquidationGracePeriodCall__Outputs(this);
  }
}

export class SetLiquidationGracePeriodCall__Inputs {
  _call: SetLiquidationGracePeriodCall;

  constructor(call: SetLiquidationGracePeriodCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get until(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetLiquidationGracePeriodCall__Outputs {
  _call: SetLiquidationGracePeriodCall;

  constructor(call: SetLiquidationGracePeriodCall) {
    this._call = call;
  }
}

export class SetUserEModeCall extends ethereum.Call {
  get inputs(): SetUserEModeCall__Inputs {
    return new SetUserEModeCall__Inputs(this);
  }

  get outputs(): SetUserEModeCall__Outputs {
    return new SetUserEModeCall__Outputs(this);
  }
}

export class SetUserEModeCall__Inputs {
  _call: SetUserEModeCall;

  constructor(call: SetUserEModeCall) {
    this._call = call;
  }

  get categoryId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetUserEModeCall__Outputs {
  _call: SetUserEModeCall;

  constructor(call: SetUserEModeCall) {
    this._call = call;
  }
}

export class SetUserEModeOnBehalfOfCall extends ethereum.Call {
  get inputs(): SetUserEModeOnBehalfOfCall__Inputs {
    return new SetUserEModeOnBehalfOfCall__Inputs(this);
  }

  get outputs(): SetUserEModeOnBehalfOfCall__Outputs {
    return new SetUserEModeOnBehalfOfCall__Outputs(this);
  }
}

export class SetUserEModeOnBehalfOfCall__Inputs {
  _call: SetUserEModeOnBehalfOfCall;

  constructor(call: SetUserEModeOnBehalfOfCall) {
    this._call = call;
  }

  get categoryId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetUserEModeOnBehalfOfCall__Outputs {
  _call: SetUserEModeOnBehalfOfCall;

  constructor(call: SetUserEModeOnBehalfOfCall) {
    this._call = call;
  }
}

export class SetUserUseReserveAsCollateralCall extends ethereum.Call {
  get inputs(): SetUserUseReserveAsCollateralCall__Inputs {
    return new SetUserUseReserveAsCollateralCall__Inputs(this);
  }

  get outputs(): SetUserUseReserveAsCollateralCall__Outputs {
    return new SetUserUseReserveAsCollateralCall__Outputs(this);
  }
}

export class SetUserUseReserveAsCollateralCall__Inputs {
  _call: SetUserUseReserveAsCollateralCall;

  constructor(call: SetUserUseReserveAsCollateralCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get useAsCollateral(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetUserUseReserveAsCollateralCall__Outputs {
  _call: SetUserUseReserveAsCollateralCall;

  constructor(call: SetUserUseReserveAsCollateralCall) {
    this._call = call;
  }
}

export class SetUserUseReserveAsCollateralOnBehalfOfCall extends ethereum.Call {
  get inputs(): SetUserUseReserveAsCollateralOnBehalfOfCall__Inputs {
    return new SetUserUseReserveAsCollateralOnBehalfOfCall__Inputs(this);
  }

  get outputs(): SetUserUseReserveAsCollateralOnBehalfOfCall__Outputs {
    return new SetUserUseReserveAsCollateralOnBehalfOfCall__Outputs(this);
  }
}

export class SetUserUseReserveAsCollateralOnBehalfOfCall__Inputs {
  _call: SetUserUseReserveAsCollateralOnBehalfOfCall;

  constructor(call: SetUserUseReserveAsCollateralOnBehalfOfCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get useAsCollateral(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetUserUseReserveAsCollateralOnBehalfOfCall__Outputs {
  _call: SetUserUseReserveAsCollateralOnBehalfOfCall;

  constructor(call: SetUserUseReserveAsCollateralOnBehalfOfCall) {
    this._call = call;
  }
}

export class SupplyCall extends ethereum.Call {
  get inputs(): SupplyCall__Inputs {
    return new SupplyCall__Inputs(this);
  }

  get outputs(): SupplyCall__Outputs {
    return new SupplyCall__Outputs(this);
  }
}

export class SupplyCall__Inputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get referralCode(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class SupplyCall__Outputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }
}

export class SupplyWithPermitCall extends ethereum.Call {
  get inputs(): SupplyWithPermitCall__Inputs {
    return new SupplyWithPermitCall__Inputs(this);
  }

  get outputs(): SupplyWithPermitCall__Outputs {
    return new SupplyWithPermitCall__Outputs(this);
  }
}

export class SupplyWithPermitCall__Inputs {
  _call: SupplyWithPermitCall;

  constructor(call: SupplyWithPermitCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get referralCode(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get permitV(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get permitR(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get permitS(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class SupplyWithPermitCall__Outputs {
  _call: SupplyWithPermitCall;

  constructor(call: SupplyWithPermitCall) {
    this._call = call;
  }
}

export class SyncIndexesStateCall extends ethereum.Call {
  get inputs(): SyncIndexesStateCall__Inputs {
    return new SyncIndexesStateCall__Inputs(this);
  }

  get outputs(): SyncIndexesStateCall__Outputs {
    return new SyncIndexesStateCall__Outputs(this);
  }
}

export class SyncIndexesStateCall__Inputs {
  _call: SyncIndexesStateCall;

  constructor(call: SyncIndexesStateCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SyncIndexesStateCall__Outputs {
  _call: SyncIndexesStateCall;

  constructor(call: SyncIndexesStateCall) {
    this._call = call;
  }
}

export class SyncRatesStateCall extends ethereum.Call {
  get inputs(): SyncRatesStateCall__Inputs {
    return new SyncRatesStateCall__Inputs(this);
  }

  get outputs(): SyncRatesStateCall__Outputs {
    return new SyncRatesStateCall__Outputs(this);
  }
}

export class SyncRatesStateCall__Inputs {
  _call: SyncRatesStateCall;

  constructor(call: SyncRatesStateCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SyncRatesStateCall__Outputs {
  _call: SyncRatesStateCall;

  constructor(call: SyncRatesStateCall) {
    this._call = call;
  }
}

export class UpdateFlashloanPremiumCall extends ethereum.Call {
  get inputs(): UpdateFlashloanPremiumCall__Inputs {
    return new UpdateFlashloanPremiumCall__Inputs(this);
  }

  get outputs(): UpdateFlashloanPremiumCall__Outputs {
    return new UpdateFlashloanPremiumCall__Outputs(this);
  }
}

export class UpdateFlashloanPremiumCall__Inputs {
  _call: UpdateFlashloanPremiumCall;

  constructor(call: UpdateFlashloanPremiumCall) {
    this._call = call;
  }

  get flashLoanPremium(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateFlashloanPremiumCall__Outputs {
  _call: UpdateFlashloanPremiumCall;

  constructor(call: UpdateFlashloanPremiumCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
