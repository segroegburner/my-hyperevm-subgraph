// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Reserve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reserve entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Reserve must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Reserve", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Reserve | null {
    return changetype<Reserve | null>(store.get_in_block("Reserve", id));
  }

  static load(id: string): Reserve | null {
    return changetype<Reserve | null>(store.get("Reserve", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get totalLiquidity(): BigInt {
    let value = this.get("totalLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLiquidity(value: BigInt) {
    this.set("totalLiquidity", Value.fromBigInt(value));
  }

  get availableLiquidity(): BigInt {
    let value = this.get("availableLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set availableLiquidity(value: BigInt) {
    this.set("availableLiquidity", Value.fromBigInt(value));
  }

  get totalSupplied(): BigInt {
    let value = this.get("totalSupplied");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSupplied(value: BigInt) {
    this.set("totalSupplied", Value.fromBigInt(value));
  }

  get totalBorrowed(): BigInt {
    let value = this.get("totalBorrowed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBorrowed(value: BigInt) {
    this.set("totalBorrowed", Value.fromBigInt(value));
  }

  get totalBorrowedVariable(): BigInt {
    let value = this.get("totalBorrowedVariable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBorrowedVariable(value: BigInt) {
    this.set("totalBorrowedVariable", Value.fromBigInt(value));
  }

  get liquidityRate(): BigInt {
    let value = this.get("liquidityRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityRate(value: BigInt) {
    this.set("liquidityRate", Value.fromBigInt(value));
  }

  get variableBorrowRate(): BigInt {
    let value = this.get("variableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set variableBorrowRate(value: BigInt) {
    this.set("variableBorrowRate", Value.fromBigInt(value));
  }

  get liquidityIndex(): BigInt {
    let value = this.get("liquidityIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityIndex(value: BigInt) {
    this.set("liquidityIndex", Value.fromBigInt(value));
  }

  get variableBorrowIndex(): BigInt {
    let value = this.get("variableBorrowIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set variableBorrowIndex(value: BigInt) {
    this.set("variableBorrowIndex", Value.fromBigInt(value));
  }

  get ltv(): BigInt {
    let value = this.get("ltv");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ltv(value: BigInt) {
    this.set("ltv", Value.fromBigInt(value));
  }

  get liquidationThreshold(): BigInt {
    let value = this.get("liquidationThreshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidationThreshold(value: BigInt) {
    this.set("liquidationThreshold", Value.fromBigInt(value));
  }

  get liquidationBonus(): BigInt {
    let value = this.get("liquidationBonus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidationBonus(value: BigInt) {
    this.set("liquidationBonus", Value.fromBigInt(value));
  }

  get reserveFactor(): BigInt {
    let value = this.get("reserveFactor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reserveFactor(value: BigInt) {
    this.set("reserveFactor", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get isFrozen(): boolean {
    let value = this.get("isFrozen");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isFrozen(value: boolean) {
    this.set("isFrozen", Value.fromBoolean(value));
  }

  get borrowingEnabled(): boolean {
    let value = this.get("borrowingEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set borrowingEnabled(value: boolean) {
    this.set("borrowingEnabled", Value.fromBoolean(value));
  }

  get usageAsCollateralEnabled(): boolean {
    let value = this.get("usageAsCollateralEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set usageAsCollateralEnabled(value: boolean) {
    this.set("usageAsCollateralEnabled", Value.fromBoolean(value));
  }

  get aTokenAddress(): Bytes {
    let value = this.get("aTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set aTokenAddress(value: Bytes) {
    this.set("aTokenAddress", Value.fromBytes(value));
  }

  get variableDebtTokenAddress(): Bytes {
    let value = this.get("variableDebtTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set variableDebtTokenAddress(value: Bytes) {
    this.set("variableDebtTokenAddress", Value.fromBytes(value));
  }

  get supplies(): SupplyEventLoader {
    return new SupplyEventLoader(
      "Reserve",
      this.get("id")!.toString(),
      "supplies"
    );
  }

  get withdraws(): WithdrawEventLoader {
    return new WithdrawEventLoader(
      "Reserve",
      this.get("id")!.toString(),
      "withdraws"
    );
  }

  get borrows(): BorrowEventLoader {
    return new BorrowEventLoader(
      "Reserve",
      this.get("id")!.toString(),
      "borrows"
    );
  }

  get repays(): RepayEventLoader {
    return new RepayEventLoader(
      "Reserve",
      this.get("id")!.toString(),
      "repays"
    );
  }

  get liquidations(): LiquidationEventLoader {
    return new LiquidationEventLoader(
      "Reserve",
      this.get("id")!.toString(),
      "liquidations"
    );
  }

  get userReserves(): UserReserveLoader {
    return new UserReserveLoader(
      "Reserve",
      this.get("id")!.toString(),
      "userReserves"
    );
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalSuppliedUSD(): BigInt {
    let value = this.get("totalSuppliedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSuppliedUSD(value: BigInt) {
    this.set("totalSuppliedUSD", Value.fromBigInt(value));
  }

  get totalBorrowedUSD(): BigInt {
    let value = this.get("totalBorrowedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBorrowedUSD(value: BigInt) {
    this.set("totalBorrowedUSD", Value.fromBigInt(value));
  }

  get totalCollateralUSD(): BigInt {
    let value = this.get("totalCollateralUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCollateralUSD(value: BigInt) {
    this.set("totalCollateralUSD", Value.fromBigInt(value));
  }

  get healthFactor(): BigInt {
    let value = this.get("healthFactor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set healthFactor(value: BigInt) {
    this.set("healthFactor", Value.fromBigInt(value));
  }

  get reserves(): UserReserveLoader {
    return new UserReserveLoader(
      "User",
      this.get("id")!.toString(),
      "reserves"
    );
  }

  get supplies(): SupplyEventLoader {
    return new SupplyEventLoader(
      "User",
      this.get("id")!.toString(),
      "supplies"
    );
  }

  get withdraws(): WithdrawEventLoader {
    return new WithdrawEventLoader(
      "User",
      this.get("id")!.toString(),
      "withdraws"
    );
  }

  get borrows(): BorrowEventLoader {
    return new BorrowEventLoader("User", this.get("id")!.toString(), "borrows");
  }

  get repays(): RepayEventLoader {
    return new RepayEventLoader("User", this.get("id")!.toString(), "repays");
  }

  get liquidations(): LiquidationEventLoader {
    return new LiquidationEventLoader(
      "User",
      this.get("id")!.toString(),
      "liquidations"
    );
  }
}

export class UserReserve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserReserve entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserReserve must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserReserve", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserReserve | null {
    return changetype<UserReserve | null>(
      store.get_in_block("UserReserve", id)
    );
  }

  static load(id: string): UserReserve | null {
    return changetype<UserReserve | null>(store.get("UserReserve", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get currentATokenBalance(): BigInt {
    let value = this.get("currentATokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentATokenBalance(value: BigInt) {
    this.set("currentATokenBalance", Value.fromBigInt(value));
  }

  get currentVariableDebt(): BigInt {
    let value = this.get("currentVariableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentVariableDebt(value: BigInt) {
    this.set("currentVariableDebt", Value.fromBigInt(value));
  }

  get scaledATokenBalance(): BigInt {
    let value = this.get("scaledATokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set scaledATokenBalance(value: BigInt) {
    this.set("scaledATokenBalance", Value.fromBigInt(value));
  }

  get scaledVariableDebt(): BigInt {
    let value = this.get("scaledVariableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set scaledVariableDebt(value: BigInt) {
    this.set("scaledVariableDebt", Value.fromBigInt(value));
  }

  get liquidityRate(): BigInt {
    let value = this.get("liquidityRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityRate(value: BigInt) {
    this.set("liquidityRate", Value.fromBigInt(value));
  }

  get variableBorrowRate(): BigInt {
    let value = this.get("variableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set variableBorrowRate(value: BigInt) {
    this.set("variableBorrowRate", Value.fromBigInt(value));
  }

  get lastUpdateTimestamp(): BigInt {
    let value = this.get("lastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdateTimestamp(value: BigInt) {
    this.set("lastUpdateTimestamp", Value.fromBigInt(value));
  }

  get usageAsCollateralEnabledOnUser(): boolean {
    let value = this.get("usageAsCollateralEnabledOnUser");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set usageAsCollateralEnabledOnUser(value: boolean) {
    this.set("usageAsCollateralEnabledOnUser", Value.fromBoolean(value));
  }
}

export class SupplyEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SupplyEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SupplyEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SupplyEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SupplyEvent | null {
    return changetype<SupplyEvent | null>(
      store.get_in_block("SupplyEvent", id)
    );
  }

  static load(id: string): SupplyEvent | null {
    return changetype<SupplyEvent | null>(store.get("SupplyEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get onBehalfOf(): Bytes {
    let value = this.get("onBehalfOf");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set onBehalfOf(value: Bytes) {
    this.set("onBehalfOf", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get referral(): i32 {
    let value = this.get("referral");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set referral(value: i32) {
    this.set("referral", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}

export class WithdrawEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WithdrawEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WithdrawEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): WithdrawEvent | null {
    return changetype<WithdrawEvent | null>(
      store.get_in_block("WithdrawEvent", id)
    );
  }

  static load(id: string): WithdrawEvent | null {
    return changetype<WithdrawEvent | null>(store.get("WithdrawEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}

export class BorrowEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BorrowEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BorrowEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BorrowEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BorrowEvent | null {
    return changetype<BorrowEvent | null>(
      store.get_in_block("BorrowEvent", id)
    );
  }

  static load(id: string): BorrowEvent | null {
    return changetype<BorrowEvent | null>(store.get("BorrowEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get onBehalfOf(): Bytes {
    let value = this.get("onBehalfOf");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set onBehalfOf(value: Bytes) {
    this.set("onBehalfOf", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get borrowRateMode(): i32 {
    let value = this.get("borrowRateMode");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowRateMode(value: i32) {
    this.set("borrowRateMode", Value.fromI32(value));
  }

  get borrowRate(): BigInt {
    let value = this.get("borrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set borrowRate(value: BigInt) {
    this.set("borrowRate", Value.fromBigInt(value));
  }

  get referral(): i32 {
    let value = this.get("referral");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set referral(value: i32) {
    this.set("referral", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}

export class RepayEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RepayEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RepayEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RepayEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RepayEvent | null {
    return changetype<RepayEvent | null>(store.get_in_block("RepayEvent", id));
  }

  static load(id: string): RepayEvent | null {
    return changetype<RepayEvent | null>(store.get("RepayEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get repayer(): Bytes {
    let value = this.get("repayer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set repayer(value: Bytes) {
    this.set("repayer", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get useATokens(): boolean {
    let value = this.get("useATokens");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set useATokens(value: boolean) {
    this.set("useATokens", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}

export class LiquidationEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidationEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidationEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LiquidationEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LiquidationEvent | null {
    return changetype<LiquidationEvent | null>(
      store.get_in_block("LiquidationEvent", id)
    );
  }

  static load(id: string): LiquidationEvent | null {
    return changetype<LiquidationEvent | null>(
      store.get("LiquidationEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get collateralReserve(): string {
    let value = this.get("collateralReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateralReserve(value: string) {
    this.set("collateralReserve", Value.fromString(value));
  }

  get debtReserve(): string {
    let value = this.get("debtReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set debtReserve(value: string) {
    this.set("debtReserve", Value.fromString(value));
  }

  get debtToCover(): BigInt {
    let value = this.get("debtToCover");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set debtToCover(value: BigInt) {
    this.set("debtToCover", Value.fromBigInt(value));
  }

  get liquidatedCollateralAmount(): BigInt {
    let value = this.get("liquidatedCollateralAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidatedCollateralAmount(value: BigInt) {
    this.set("liquidatedCollateralAmount", Value.fromBigInt(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get receiveAToken(): boolean {
    let value = this.get("receiveAToken");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set receiveAToken(value: boolean) {
    this.set("receiveAToken", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Protocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Protocol must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Protocol", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get_in_block("Protocol", id));
  }

  static load(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get("Protocol", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalValueLockedUSD(): BigInt {
    let value = this.get("totalValueLockedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalValueLockedUSD(value: BigInt) {
    this.set("totalValueLockedUSD", Value.fromBigInt(value));
  }

  get totalBorrowedUSD(): BigInt {
    let value = this.get("totalBorrowedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBorrowedUSD(value: BigInt) {
    this.set("totalBorrowedUSD", Value.fromBigInt(value));
  }

  get totalUsers(): i32 {
    let value = this.get("totalUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalUsers(value: i32) {
    this.set("totalUsers", Value.fromI32(value));
  }

  get totalSupplies(): i32 {
    let value = this.get("totalSupplies");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalSupplies(value: i32) {
    this.set("totalSupplies", Value.fromI32(value));
  }

  get totalBorrows(): i32 {
    let value = this.get("totalBorrows");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalBorrows(value: i32) {
    this.set("totalBorrows", Value.fromI32(value));
  }

  get totalRepays(): i32 {
    let value = this.get("totalRepays");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalRepays(value: i32) {
    this.set("totalRepays", Value.fromI32(value));
  }

  get totalWithdraws(): i32 {
    let value = this.get("totalWithdraws");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalWithdraws(value: i32) {
    this.set("totalWithdraws", Value.fromI32(value));
  }

  get totalLiquidations(): i32 {
    let value = this.get("totalLiquidations");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalLiquidations(value: i32) {
    this.set("totalLiquidations", Value.fromI32(value));
  }
}

export class SupplyEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): SupplyEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<SupplyEvent[]>(value);
  }
}

export class WithdrawEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): WithdrawEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<WithdrawEvent[]>(value);
  }
}

export class BorrowEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BorrowEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BorrowEvent[]>(value);
  }
}

export class RepayEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RepayEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RepayEvent[]>(value);
  }
}

export class LiquidationEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): LiquidationEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<LiquidationEvent[]>(value);
  }
}

export class UserReserveLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserReserve[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserReserve[]>(value);
  }
}
