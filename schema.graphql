# schema.graphql

enum MarketType {
  POOLED
  ISOLATED
}

type User @entity {
  id: ID!                    # address de l'utilisateur
  totalSuppliedUSD: BigInt!
  totalBorrowedUSD: BigInt!
  totalCollateralUSD: BigInt!
  points: Int!
  referralPoints: Int!
  referralCount: Int!
  eModeActivated: Boolean!
  referrerAddress: String

  userAssets: [UserAsset!]! @derivedFrom(field: "user")
  logEvents: [LogEvent!]! @derivedFrom(field: "user")
}

type Asset @entity {
  id: ID!
  symbol: String!
  name: String!
  decimals: Int!
  type: MarketType!
  priceUSD: BigInt!
  marketSizeUSD: BigInt!
  availableLiquidity: BigInt!
  totalLiquidity: BigInt!
  totalSupplied: BigInt!
  totalBorrowed: BigInt!
  utilizationRate: BigInt!
  supplyAPY: BigInt!
  borrowAPY: BigInt!
  liquidityRate: BigInt!
  variableBorrowRate: BigInt!
  ltv: BigInt!
  liquidationThreshold: BigInt!
  liquidationBonus: BigInt!
  reserveFactor: BigInt!
  liquidationPenalty: BigInt!
  isActive: Boolean!
  isFrozen: Boolean!
  borrowingEnabled: Boolean!
  usageAsCollateralEnabled: Boolean!

  # --- Nouveaux champs nécessaires pour le suivi off-chain ---
  aTokenAddress: Bytes!                 # token représentant la part de dépôt
  variableDebtTokenAddress: Bytes!      # token représentant la dette
  liquidityIndex: BigInt!               # index pour recalculer le solde actuel du fournisseur
  variableBorrowIndex: BigInt!          # index pour recalculer la dette actuelle de l’emprunteur
  lastUpdateTimestamp: BigInt!          # utile pour calculer les intérêts depuis la dernière MAJ

  market: Market!
  userAssets: [UserAsset!]! @derivedFrom(field: "asset")
  logEvents: [LogEvent!]! @derivedFrom(field: "assetRel")
}

type UserAsset @entity {
  id: ID!
  user: User!
  asset: Asset!
  depositedAmount: BigInt!
  borrowedAmount: BigInt!
  depositedUSD: BigInt!
  borrowedUSD: BigInt!
  usageAsCollateralEnabled: Boolean!
}

type Market @entity {
  id: ID!
  name: String!
  description: String
  marketSizeUSD: BigInt!
  feesPaidUSD: BigInt!

  assets: [Asset!]! @derivedFrom(field: "market")
}

type LogEvent @entity {
  id: ID!
  type: String!
  user: User!
  assetRel: Asset!
  onBehalfOf: Bytes
  amount: BigInt!
  borrowRateMode: BigInt
  borrowRate: BigInt
  repayer: Bytes
  useATokens: Boolean
  collateralAsset: Bytes
  debtToCover: BigInt
  liquidatedCollateralAmount: BigInt
  liquidator: Bytes
  receiveAToken: Boolean
  timestamp: BigInt!
  txHash: Bytes!
}
